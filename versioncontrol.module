<?php
// $Id$
/**
 * @file
 * Version Control API - An interface to version control systems
 * whose functionality is provided by pluggable back-end modules.
 *
 * Copyright 2007 by Jakob Petsovits <jpetso@gmx.at>
 *
 * Distributed under the GNU General Public Licence version 2 or higher,
 * as published by the FSF on http://www.gnu.org/copyleft/gpl.html
 */

// Optional capabilities that backend modules can provide.
define('VERSIONCONTROL_CAPABILITY_CREATE_REPOSITORY',       0);
define('VERSIONCONTROL_CAPABILITY_ACCOUNT_MANAGEMENT',      1);
define('VERSIONCONTROL_CAPABILITY_DIRECTORY_RESTRICTIONS',  2);
define('VERSIONCONTROL_CAPABILITY_BRANCH_TAG_RESTRICTIONS', 3);
define('VERSIONCONTROL_CAPABILITY_ATOMIC_COMMITS',          4);
define('VERSIONCONTROL_CAPABILITY_LIST_FILES',              5);

// VCS item types.
define('VERSIONCONTROL_ITEM_FILE',       0);
define('VERSIONCONTROL_ITEM_DIRECTORY',  1);

// VCS file types.
define('VERSIONCONTROL_ITEM_TEXT',       0);
define('VERSIONCONTROL_ITEM_BINARY',     1);

// VCS actions for a single item (file or directory) in a commit.
define('VERSIONCONTROL_ACTION_ADDED',    0);
define('VERSIONCONTROL_ACTION_MODIFIED', 1);
define('VERSIONCONTROL_ACTION_MOVED',    2);
define('VERSIONCONTROL_ACTION_COPIED',   3);
define('VERSIONCONTROL_ACTION_MERGED',   4);
define('VERSIONCONTROL_ACTION_DELETED',  5);


/**
 * Retrieve a set of commits for the specified repository if they match the
 * given constraints. If no single commit matches these constraints,
 * an empty array is returned.
 *
 * @param $constraints
 *   An optional array of constraints. Possible array elements are:
 *
 *   'vcs': An array of strings, like array('cvs', 'svn', 'git').
 *          If given, only commits for these backends will be returned.
 *   'repositories': An array of repository ids. If given, only commits
 *                   for the corresponding repositories will be returned.
 *   'branches': An array of strings, like array('HEAD', 'DRUPAL-5').
 *               If given, only commits on the given branches will be returned.
 *   'tags': An array of strings, like array('DRUPAL-4-7--1-1', 'DRUPAL-5--1-3').
 *           If given, only commits captured by these tags will be returned.
 *   'paths': An array of strings (item locations),
 *            like array('/trunk/contributions/modules/versioncontrol').
 *            If given, only commits that affected this item (or its children,
 *            in case the item is a directory) will be returned.
 *   'commit_id_lower': A commit id. If given, the result set will not contain
 *                      commits earlier than this lower bound. Mind that
 *                      commit ids only correspond to chronological order
 *                      within the bounds of each repository.
 *   'commit_id_upper': A commit id. If given, the result set will not contain
 *                      commits later than this upper bound. Mind that
 *                      commit ids only correspond to chronological order
 *                      within the bounds of each repository.
 *   'date_lower': A Unix timestamp. If given, the result set will not contain
 *                 commits earlier than this lower bound.
 *   'date_upper': A Unix timestamp. If given, the result set will not contain
 *                 commits later than this upper bound.
 *   'uids': An array of Drupal user ids. If given, the result set will not
 *           contain commits that don't correspond to one of the specified users.
 *   'usernames': An array of system-specific usernames (the ones that the
 *                revision control systems themselves get to see). If given,
 *                the result set will not contain commits that don't correspond
 *                to one of the specified users.
 *   '[xxx]_specific': An array of VCS specific constraints. How this array
 *                     looks like is defined by the corresponding backend
 *                     module ([xxx]_backend). Other backend modules won't
 *                     get to see this constraint, so in theory you can provide
 *                     one of those for each backend in one single query.
 *
 * @return
 *   An array of commits, reversely sorted by the time of the commit.
 *   Each element contains a structured array with the following keys:
 *
 *   'commit_id': The Drupal-specific commit identifier (a simple integer)
 *                which is unique among all commits in all repositories.
 *   'repo_id': The Drupal-specific repository identifier.
 *   'date': The time when the revision was committed, given as Unix timestamp.
 *   'uid': The Drupal user id of the committer.
 *   'username': The system specific VCS username of the committer.
 *   'message': The commit message.
 *   'revision': The VCS specific commit identifier, like "1.2.2.4" in CVS,
 *               "27491" in Subversion or an SHA-1 key in various distributed
 *               version control systems.
 *
 *   Additional elements may be added by specific version control system backends.
 */
versioncontrol_get_commits($constraints = array()) {
}


/**
 * Retrieve a 'Drupal uid' => 'VCS username' mapping given a set of user ids.
 *
 * @param $repository
 *   A structured array containing repository information, like a single
 *   element of what versioncontrol_get_repositories() returns.
 * @param $uid_list
 *   An array containing Drupal user ids.
 *
 * @return
 *   A structured array with the Drupal user id as key and the system specific
 *   VCS username as value.
 */
versioncontrol_get_authors_by_uid($repository, $uid_list) {
}

/**
 * Retrieve a 'Drupal uid' => 'VCS username' mapping given a set of usernames.
 *
 * @param $repository
 *   A structured array containing repository information, like a single
 *   element of what versioncontrol_get_repositories() returns.
 * @param $username_list
 *   An array containing system specific VCS usernames.
 *
 * @return
 *   A structured array with the Drupal user id as key and the system specific
 *   VCS username as value.
 */
versioncontrol_get_authors_by_username($repository, $username_list) {
}


/**
 * Retrieve the URL of the repository viewer that displays the given item
 * in the given repository at the time of the given commit.
 *
 * @param $repository
 *   A structured array containing repository information, like a single
 *   element of what versioncontrol_get_repositories() returns.
 * @param $commit
 *   The point in time when the item had the name $filepath. Remember, renaming
 *   operations can pretty much screw up unique item identification otherwise.
 * @param $path
 *   The item for which the view URL should actually be retrieved.
 *
 * @return
 *   The item view URL corresponding to the given arguments.
 */
versioncontrol_get_url_view($repository, $commit, $path) {
}

/**
 * Retrieve the URL of the repository viewer that displays the diff of the
 * given file in the given repository, showing the diff between the given
 * commit and the commit which preceded that one.
 *
 * @param $repository
 *   A structured array containing repository information, like a single
 *   element of what versioncontrol_get_repositories() returns.
 * @param $commit
 *   The newer commit of the two that should be diffed, and the point in time
 *   when the item had the name $filepath.
 * @param $filepath
 *   The file for which the diff URL should actually be retrieved.
 *
 * @return
 *   The diff URL corresponding to the given arguments.
 */
versioncontrol_get_url_diff($repository, $commit, $filepath) {
}
