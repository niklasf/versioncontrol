<?php
// $Id$
require_once drupal_get_path('module', 'versioncontrol') . '/tests/VersioncontrolTestCase.test';
/**
 * @file
 * Unit tests for repository class
 */

/**
 * Unit tests for VersioncontrolRepository class
 */
class VersioncontrolRepositoryUnitTestingTestCase extends VersioncontrolTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      // FIXME
      'name' => t('Repository class unit tests'),
      'description' => t('Unit tests for the VersioncontrolRepository class.'),
      'group' => t('Version Control API'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    $this->useBackends = self::BACKENDS_TEST;
    parent::setUp();
  }

  public function testBadLoadParams() {
    $repository = $this->testBackend->loadEntities('repo', array(''));
    $this->assertTrue(empty($repository), t('Make sure we get an empty array when trying to get a repository with empty repo_id'), 'controller');

    $repository = $this->testBackend->loadEntities('repo', NULL);
    $this->assertTrue(empty($repository), t('Make sure we get an empty array when trying to get a repository with a NULL repo_id'), 'controller');

    $repository = $this->testBackend->loadEntities('repo', array(1));
    $this->assertTrue(empty($repository), t('Make sure we get an empty array when trying to get a repository which do not exit'), 'controller');
  }

  public function testRepositoryLoadParams() {
    $name = $this->randomName();
    $data = array(
      'name' => $name,
      'vcs' => 'test',
      'backend' => $this->testBackend,
      'root' => '/fake/path/to/repo',
    );
    $repo = $this->testBackend->buildEntity('repo', $data);
    $repo->insert();
    $this->assertTrue(isset($repo->repo_id) && is_numeric($repo->repo_id), t('VersioncontrolRepository::insert() properly populates a new repository object with an integer repo_id.'));
    $repositories = $this->testBackend->loadEntities('repo', array($repo->repo_id));
    $this->assertTrue(isset($repositories[$repo->repo_id]) && is_a($repositories[$repo->repo_id], 'VersioncontrolRepository'), t('Make sure we get a valid return when passing a good repo_id.'));
    $this->assertEqual($repositories[$repo->repo_id]->repo_id, $repo->repo_id, t('Make sure we get the right repository.'), 'controller');
  }
}
