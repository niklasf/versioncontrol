<?php

/**
 * @file: Main module of Versioncontrol API Activity.
 */
 
/**
 * Implementation of hook_hook_info().
 *
 * Provides Trigger support for Version Control API.
 */
function versioncontrol_hook_info() {
  $hooks = versioncontrol_activity_hooks();
  
  return array('versioncontrol' => array('versioncontrol' => $hooks['versioncontrol']));
}

/**
 * Implementation of hook_activity_info().
 *
 * Provides Activity support for Project.
 */
function versioncontrol_activity_info() {
  static $cache;
  static $cache_options;
  
  if (!isset($cache)) {
    $cache = versioncontrol_activity_hooks();
  
    foreach ($cache as $module => &$hooks) {
      $hooks = array_keys($hooks);
    }
  }
  
  if (!isset($cache_options)) {
    $cache_options = versioncontrol_get_backends();
    
    foreach ($cache_options as $name => &$backend) {
      $backend = $backend->name;
    }
  }
  
  $info = new stdClass();
  
  $info->api = 2;
  $info->name = 'versioncontrol';
  $info->object_type = 'VersioncontrolEvent';
  $info->eid_field = 'repo_id';
  $info->objects = array('Actor' => 'VersioncontrolEvent');
  $info->hooks = array('versioncontrol' => $cache['versioncontrol']);
  $info->type_options = $cache_options;
  $info->list_callback = 'versioncontrol_activity_list_activity_actions';
  $info->context_load_callback = 'versioncontrol_activity_load_activity_context';
  
  return $info;
}

/**
 * Implementation of hook_activity_objects_alter.
 */
function versioncontrol_activity_activity_objects_alter(&$objects, $type) {
  switch ($type) {
    case 'VersioncontrolEvent':
      $objects['VersioncontrolRepository'] = $objects['VersioncontrolEvent']->getRepository();
      
      break;
  }
}

/**
 * Implementation of hook_activity_type_check().
 */
function versioncontrol_activity_type_check($token_objects, $types) {
  return (in_array($tokens_objects['VersioncontrolRepository']->type, $types));
}

/**
 * Returns a list of triggers for Project.
 */
function versioncontrol_activity_hooks() {
  return array(
    'versioncontrol' =>
      array(
        'repository_insert' => array(
          'runs when' => t('When a repository is created.'),
        ),
        'code_arrival' => array(
          'runs when' => t('When new code has arrived.'),
        ),
      ),
  );
}

/**
 * Following functions are to catch events from the Version Control API module.
 */

/**
 * Implementation of hook_versioncontrol_code_arrival.
 */
function versioncontrol_activity_versioncontrol_code_arrival(VersioncontrolRepository $repository, VersioncontrolEvent $event) {
  $aids = _trigger_get_hook_aids('versioncontrol', 'code_arrival');
  
  $context = versioncontrol_activity_context('code_arrival', $repository, $event);

  actions_do(array_keys($aids), $repository, $context);
}

/**
 * Implementation of hook_versioncontrol_repository_entity_insert.
 */
function versioncontrol_activity_versioncontrol_repository_entity_insert(VersioncontrolRepository $repository) {
  global $user;
  
  if (!empty($repository->uid)) {
    $uid = $repository->uid;
  } else {
    $uid = $user->uid;
  }
  
  $aids = _trigger_get_hook_aids('versioncontrol', 'repository_insert');
  
  // Temporary fix, until we can associate repository insertion with a VersioncontrolEvent.
  $event = versioncontrol_activity_create_event($repository, $uid);
  
  $context = versioncontrol_activity_context('repository_insert', $repository, $event);

  actions_do(array_keys($aids), $repository, $context);
}

/**
 * Returns the context array for Project activity.
 */
function versioncontrol_activity_context($op, VersioncontrolRepository $repository, VersioncontrolEvent $event, $uid = FALSE) {
  if (empty($repository)) {
    return array();
  } 
  else {
    $context = array();
    
    if ($uid !== FALSE) {
      $context['actor'] = $uid;
    } 
    else {
      $context['actor'] = $event->uid;
    }
    
    if (!empty($context['actor'])) {
      $repository->uid = $context['actor'];
    }
    else {
      $context['actor'] = 0;
      $repository->uid = 0;
    }
    
    $context += array(
      'hook' => 'versioncontrol',
      'op' => $op,
      'action' => $op,
      'VersioncontrolRepository' => $repository,
      'VersioncontrolEvent' => $event,
    );
    
    return $context;
  }
}

/**
 *
 */
function versioncontrol_activity_create_event(VersioncontrolRepository $repository, $uid = 0) {
  $data = array(
    'uid' => $uid,
    'repository' => $repository,
    'timestamp' => time(),
  );
  
  return $repository->getBackend()->buildEntity('event', $data);
}

/**
 * Implementation of hook_activity_token_list().
 *
 * Here we break with our convention of working abstract,
 * it's not really necesarry but it increases usability.
 */
function versioncontrol_activity_token_list($type = 'all') {
  $tokens = array();
  
  if (module_exists('versioncontrol_project') && ($type == 'VersioncontrolRepository')) {
    $tokens = project_activity_token_list('project');
  }
  
  return $tokens;
}

/**
 * List all the Activity Actions that match the hook and op.
 *
 * @param string $hook
 *  The hook that is to be fired.
 * @param string $op
 *  The op to be used in the hook.
 * @param int $max_age
 *  The max age from now.
 *
 * @return array
 *  An array of arrays with 'id', 'created' and 'actor' keys.
 */
function versioncontrol_activity_list_activity_actions($hook, $op, $max_age, $from, $count) {
  $actions = array();

  if (!empty($max_age)) {
    $min_time = time() - $max_age;
  }
  else {
    $min_time = 0;
  }

  $sql_strings = array(
    'code_arrival' => 'SELECT elid, repo_id, timestamp as created, uid as actor FROM {versioncontrol_event_log} WHERE timestamp > %d',
    //'repository_insert' => 'SELECT repo_id, updated as created, ',
  );

  if (!empty($sql_strings[$op])) {
    $result = db_query_range($sql_strings[$op], $min_time, $from, $count);
    while ($row = db_fetch_array($result)) {
      $row['id'] = array(
        'repo_id' => $row['repo_id'], 
        'uid' => $row['actor'], 
        'elid' => (!empty($row['elid']) ? $row['elid'] : FALSE)
      );
      
      $actions[] = $row;
    }
  }

  return $actions;
}

/**
 * Load up the context array to pass to activity_record.
 *
 * @param string $hook
 *  The hook that is being fired.
 * @param string $op
 *  The op for that hook.
 * @param string $id
 *  The id for the action.
 *
 * @return array
 *   The context array for activity_record.
 * @see trigger_nodeapi
 */
function versioncontrol_activity_load_activity_context($hook, $op, $id) {
  $repositories = versioncontrol_repository_load_multiple(array($id['repo_id']));
  $repository = reset($repositories);

  if (!empty($id['elid'])) {
    $event = reset($repository->loadEvents(array($id['elid'])));
  }
  else {
    $event = versioncontrol_activity_create_event($repository, $id['uid']);
  }

  return versioncontrol_activity_context($op, $repository, $event);
}
