<?php

/**
 * @file: Main module of Versioncontrol API Activity.
 */
 
/**
 * Implementation of hook_hook_info().
 *
 * Provides Trigger support for Version Control API.
 */
function versioncontrol_hook_info() {
  $hooks = versioncontrol_activity_hooks();
  
  return array('versioncontrol' => array('versioncontrol' => $hooks['versioncontrol']));
}

/**
 * Implementation of hook_activity_info().
 *
 * Provides Activity support for Project.
 */
function versioncontrol_activity_info() {
  static $cache;
  static $cache_options;
  
  if (!isset($cache)) {
    $cache = versioncontrol_activity_hooks();
  
    foreach ($cache as $module => &$hooks) {
      $hooks = array_keys($hooks);
    }
  }
  
  if (!isset($cache_options)) {
    $cache_options = versioncontrol_get_backends();
    
    foreach ($cache_options as $name => &$backend) {
      $backend = $backend->name;
    }
  }
  
  $info = new stdClass();
  
  $info->api = 2;
  $info->name = 'versioncontrol';
  $info->object_type = 'VersioncontrolRepository';
  $info->eid_field = 'repo_id';
  $info->objects = array('Actor' => 'VersioncontrolRepository');
  $info->hooks = array('versioncontrol' => $cache['versioncontrol']);
  $info->type_options = $cache_options;
  $info->list_callback = 'versioncontrol_activity_list_activity_actions';
  $info->context_load_callback = 'versioncontrol_activity_load_activity_context';
  
  return $info;
}

/**
 * Implementation of hook_activity_type_check().
 */
function versioncontrol_activity_type_check($token_objects, $types) {
  return (in_array($tokens_objects['VersioncontrolRepository']->type, $types));
}

/**
 * Returns a list of triggers for Project.
 */
function versioncontrol_activity_hooks() {
  static $cache;
  
  if (!isset($cache)) {
    $cache = array(
      'versioncontrol' =>
        array(
          'activity' => array(
            'runs when' => t('When network activity was caused.'),
          ),
        ),
    );
  }
  
  return $cache;
}

/**
 * Following functions are to catch events from the Version Control API module.
 */

/**
 *
 */
function versioncontrol_activity_versioncontrol_activity($repository, $uid) {
  $aids = _trigger_get_hook_aids('versioncontrol', 'activity');
  
  // Hack required by the Activity module for correct Token replacement.
  $repository->uid = $uid;
  
  $context = versioncontrol_activity_context('activity', $repository, $uid);

  actions_do(array_keys($aids), $repository, $context);
}

/**
 * Returns the context array for Project activity.
 */
function versioncontrol_activity_context($op, $repository, $uid = FALSE) {
  if (empty($repository)) {
    return array();
  } 
  else {
    $context = array(
      'hook' => 'versioncontrol',
      'op' => $op,
      'action' => $op,
      'VersioncontrolRepository' => $repository,
    );
    
    if ($uid !== FALSE) {
      $context['actor'] = $uid;
    }
    
    return $context;
  }
}

/**
 * Implementation of hook_activity_token_list().
 *
 * Here we break with our convention of working abstract,
 * it's not really necesarry but it increases usability.
 */
function versioncontrol_activity_token_list($type = 'all') {
  $tokens = array();
  
  if (module_exists('versioncontrol_project') && ($type == 'VersioncontrolRepository')) {
    $tokens = project_activity_token_list('project');
  }
  
  return $tokens;
}

/**
 * List all the Activity Actions that match the hook and op.
 *
 * @param string $hook
 *  The hook that is to be fired.
 * @param string $op
 *  The op to be used in the hook.
 * @param int $max_age
 *  The max age from now.
 *
 * @return array
 *  An array of arrays with 'id', 'created' and 'actor' keys.
 */
function versioncontrol_activity_list_activity_actions($hook, $op, $max_age) {
  $actions = array();

  if (!empty($max_age)) {
    $min_time = time() - $max_age;
  }
  else {
    $min_time = 0;
  }


  if ($op == 'activity' ) {
    $sql = "SELECT repo_id as id, timestamp as created, uid as actor FROM {versioncontrol_event_log} WHERE timestamp > %d";
  }

  if (isset($sql)) {
    $result = db_query($sql, $min_time);
    while ($row = db_fetch_array($result)) {
      $actions[] = $row;
    }
  }

  return $actions;
}

/**
 * Load up the context array to pass to activity_record.
 *
 * @param string $hook
 *  The hook that is being fired.
 * @param string $op
 *  The op for that hook.
 * @param string $id
 *  The id for the action.
 *
 * @return array
 *   The context array for activity_record.
 * @see trigger_nodeapi
 */
function versioncontrol_activity_load_activity_context($hook, $op, $id) {
  return versioncontrol_activity_context($op, versioncontrol_repository_load($id));
}